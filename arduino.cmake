cmake_minimum_required(VERSION 3.23)

include(${CMAKE_CURRENT_LIST_DIR}/arduino_boards.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/arduino_compilation.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/arduino_core.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/arduino_hex.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/lto.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/arduino_upload.cmake)

function(add_arduino_sketch sketch_name arduino_core_path)
    message(STATUS "Adding Arduino Sketch - Name: ${sketch_name}")
    message(VERBOSE "Adding executable ${sketch_name}")
    add_executable(${sketch_name})
    if(NOT DEFINED ARDUINO_SKETCH_TARGET)
        set(ARDUINO_SKETCH_TARGET ${sketch_name} PARENT_SCOPE)
    endif()
    create_compile_flags_library()
    message(VERBOSE "Linking arduino_CompileFlags flags")
    target_link_libraries(${sketch_name} PUBLIC arduino_CompileFlags)
    message(VERBOSE "Including Arduino Core to Sketch")
    include_arduino_core(${sketch_name} ${arduino_core_path})
    message(VERBOSE "Adding sketch_warning and sketch_options libraries for customizing the build")
    add_library(sketch_warnings INTERFACE)
    add_library(sketch_options INTERFACE)
    target_compile_features(sketch_options INTERFACE cxx_std_11 c_std_11)
    target_compile_options(sketch_warnings INTERFACE
        "-Wall"
        "-Wextra"
        "-pedantic"
    )
    target_link_libraries(${sketch_name} PRIVATE sketch_warnings)
    target_link_libraries(${sketch_name} PRIVATE sketch_options)
    message(VERBOSE "Adding hex file generation to post build")
    create_hex_on_build(${sketch_name})
    message(STATUS "Successfully Created Sketch: ${sketch_name}")
endfunction()

function(include_arduino_library library_name)
    if (ARGC GREATER 1)
        message(VERBOSE "Optional Path Provided: ${ARGV1}")
        if(EXISTS ${ARGV1})
            message(VERBOSE "Found Valid Path ${ARGV1}")
            if (EXISTS ${ARGV1}/CMakeLists.txt)
                message(VERBOSE "Including subdirectory: ${ARGV1}")
                add_subdirectory(${ARGV1} externallibs/${library_name})
            endif()
        endif()
    endif()
    if (TARGET ${library_name})
        set(library_target_name ${library_name})
    elseif(TARGET arduino_${library_name})
        set(library_target_name arduino_${library_name})
    else()
        message(WARNING "Unable to find Library: ${library_name}")
        return()
    endif()
    get_target_property(type ${library_target_name} TYPE)
    if(${type} STREQUAL "INTERFACE_LIBRARY")
        target_link_libraries(${library_target_name} INTERFACE arduino_AvrCore)
        target_link_libraries(${library_target_name} INTERFACE arduino_CompileFlags)
        target_link_libraries(${ARDUINO_SKETCH_TARGET} INTERFACE ${library_target_name})
    elseif(${type} STREQUAL "STATIC_LIBRARY")
        target_link_libraries(${library_target_name} PRIVATE arduino_AvrCore)
        target_link_libraries(${library_target_name} PRIVATE arduino_CompileFlags)
        target_link_libraries(${ARDUINO_SKETCH_TARGET} PUBLIC ${library_target_name})
    else()
        message(WARNING "Unable to add Library - Library type must be INTERFACE or STATIC - Got ${type} instead")
        return()
    endif()
    message(STATUS "Added Library: ${library_name}")
endfunction()